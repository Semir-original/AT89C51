;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Fri May 29 2020
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

N1		EQU 	30H			
N2		EQU		31H
N3		EQU 	32H
N4		EQU 	33H
cnt		EQU 	34H
temp	EQU 	35H
temp2	EQU 	36H		
sgn      EQU     37H	
ERR     EQU     38H
res    EQU     39H
temp3    EQU     40H
temp4   EQU     41H
H			EQU		42H
L			EQU		43H
	;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
     

mov r4,0
jmp   asli
;====================================================================
; CODE SEGMENT
;====================================================================
org 100h
	asli :
		acall startlcd	
		acall chiomade	
		acall calculate 
		acall print
		acall resetflags
        sjmp asli
;------------------------------------------------
calculate:
	cjne R4,#0,errfun
	

	mov a,sgn
	cjne a,#"+",menha
	mov a,N1	
	mov b,N2
	add a,b
;	mov res,a
avalesh:cjne a,#0,badi
	ljmp tamomshod
errfun:ljmp err1
badi:	mov b,#10
	div ab
	mov R0,b
	cjne a,#0,next
	ljmp tamomshod

next: mov b,#10
		div ab
		mov r1,b
		cjne a,#0,next1
		ljmp tamomshod
	
next1: mov b,#10
			div ab
			mov r2,b				
	sjmp tamomshod

menha:cjne a,#"-",zarb
			mov a,N1
			clr c
			subb a,N2
			jnc avalesh
			mov a,#0c0h
			acall sendcommand
			acall sdelay
			mov a,#"-"
			acall senddata
			acall sdelay
			mov a,N2
			clr c
			subb a,N1
			ljmp avalesh
				
			
			



zarb:cjne a,#"*",taghsim
	mov a,N2
	cjne a,#0,bepar
	ljmp tamomshod
bepar:	mov a,N1
		cjne a,#0,bepar1
		ljmp tamomshod
bepar1:	mov B,N2
	mul ab
	mov H,b
	mov L,a
    mov a,h
	jnz tamomshod
	mov a,l
	ljmp avalesh
	
	







taghsim:cjne a,#"/",err1




tamomshod:ret
err1:ret
;------------------------------------------------
print:
cjne R4,#0,err2
	mov a,#0c1h
	acall sendcommand
	acall sdelay
	mov a,r3
	add a,#30h
	acall senddata
	mov a,r2
		add a,#30h
	acall sdelay
	acall senddata
	mov a,r1
	add a,#30h
	acall sdelay
	acall senddata
	mov a,r0
	add a,#30h
	acall sdelay
	acall senddata 
	acall readkeypad
	
	
;	mov b,#10
;	div ab
;	mov 
;	acall senddata
	acall delay
	
	
	
	
	









err2:ret
;------------------------------------------------
resetflags:
mov r4,#0	
mov N1,#0
mov N2,#0
mov res,#0
mov sgn,#0
mov r0,#0
mov r1,#0
mov r2,#0
mov r3,#0
mov temp,#0
;mov temp1,#0
mov temp2,#0
mov temp3,#0
mov temp4,#0
mov  h,#0
mov l,#0
clr c
clr a
clr ov
ret
;------------------------------------------------
startlcd :
	mov a,#38h
acall sendcommand
	mov a,#0eh
acall sendcommand
	mov a,#01h
acall sendcommand
	mov a,#06h
acall sendcommand	
	mov a,#84H
acall sendcommand
			ret
;-------------------------------------------------
chiomade:
azaval:	acall readkeypad         ;adad aval 
			acall adade?
			cjne r0,#1,azaval
broberim: acall senddata
			anl a,#0fH	
			mov temp,a
			acall readkeypad                      ; adad dovom
			acall operatore?
			cjne r0,#0,operator
			acall adade?
			cjne r0,#1,error
			acall senddata
			anl a,#0fh
			mov temp2,a
			mov a,temp
			mov b,#10
			mul ab
			add a,temp2
			mov N1,a
			acall readkeypad                     ;montazerer operator
			acall adade?
			cjne r0,#0,error       ; agar adad hast bro birun(2 ta adad gerefte badish bayad operator bashe)
			acall operatore?
			cjne r0,#1,error
			acall senddata
			mov sgn,a
	ghesmat2:
			acall readkeypad 
			acall operatore?                        ;montazere adade 3 om 
			cjne r0,#0,error
			acall adade?
			cjne r0,#1,error
			acall senddata
			anl a,#0fh
			mov temp,a
			acall readkeypad                      ;ya "=" ya adad
			acall operatore?
			cjne r0,#0,error
			acall adade?
			cjne r0,#1,m
			acall senddata
			anl a,#0fh
			mov temp2,a
			mov b,#10
			mov a,temp
			mul ab
			add a,temp2
			mov N2,a
			sjmp finish
				

operator: acall senddata
mov sgn,a
mov a,temp
mov N1,a
sjmp ghesmat2
				
m:acall senddata 
	mov a,temp
	mov N2,a
	sjmp finish
finish:
ret
error:
mov R4 , #1
 ret

;---------------------------------------------
operatore?:
	mov r0,#0
CJNE  a,#"+",multi
	mov r0,#1
multi: cjne a,#"*",divis
mov r0,#1
divis: cjne a,#"/",subt
mov r0,#1
subt: cjne a,#"-",back1
mov r0,#1
back1:ret
	
;------------------------------------------------
adade?:
 
 	mov r0,#0
CJNE  a,#"0",yek
	mov r0,#1
yek:CJNE  a,#"1",do
mov r0,#1
do:CJNE  a,#"2",se
mov r0,#1
se:CJNE  a,#"3",char
mov r0,#1
char:CJNE  a,#"4",panj
mov r0,#1
panj:CJNE  a,#"5",shesh
mov r0,#1
shesh:CJNE  a,#"6",haft
mov r0,#1
haft:CJNE  a,#"7",hasht
mov r0,#1
hasht:CJNE  a,#"8",noh
mov r0,#1
noh:CJNE  a,#"9",back
mov r0,#1
back : ret
;-------------------------------------------------
readkeypad:
				mov p3,#0ffh
k1:	mov p2,#0D
		mov a,p3
		anl a,#00001111b
		cjne a,#00001111b,k1
k2:	;ACALL DELAY
		mov a,p3
		anl a,#00001111b
		cjne a,#00001111b,over 
		sjmp k2		
over : ;ACALL DELAY 	
		mov a,p3
		anl a,#00001111b
		cjne a,#00001111b,over1
		sjmp k2

over1:  mov p2,#11111110b
			mov a,p3
			anl a,#00001111b

			cjne a,#00001111b,Row_0
			mov p2,#11111101b
			mov a,p3
			anl a,#00001111b
			cjne a,#00001111b,row_1

		mov p2,#11111011b
		mov a,p3
		anl a,#00001111b
		cjne a,#00001111b,row_2

			mov p2,#11110111b
			mov a,p3
			anl a, #00001111b
			cjne a,#00001111b,row_3
ljmp k2
			
	row_0: mov dptr,#kcode0
		sjmp find
	row_1: mov dptr,#kcode1
		sjmp find
	row_2: mov dptr,#kcode2
		sjmp find
	row_3: mov dptr,#kcode3
		sjmp find

	find : rrc a
		jnc match 
		inc dptr 
	sjmp find 
	match : clr a 
	movc a,@a+dptr
	jz alaki
ret
alaki :acall sdelay 
ljmp asli












;-----------------------------------------------------------
senddata:
			mov p1,a
			setb p0.0
			clr		p0.1
			setb p0.2
			acall sdelay       ; baraye latch budan bayad had aghal 450 n s in paye 1 bashad
			clr p0.2 
acall sdelay
ret

;---------------------------------------------------------
sendcommand:
				mov p1,a
				clr p0.0
				clr p0.1
				setb p0.2
			acall sdelay
				clr p0.2
ret
;-----------------------------------------------------------------
sdelay:
				setb rs1
     		mov r5, #50
first1:	          	mov r6,#255
second1 :  DJNZ  r6,second1 
				djnz r5,first1
	clr rs1
				ret


;---------------------------------------------------------------------
Delay:
setb rs1

				mov r7,#10
 third:      		mov r5, #255
 first:	          	mov r6,#255
second :  djnz  r6,second 
				djnz r5,first
				djnz r7,third
clr rs1
				ret
;--------------------------------------------------------------------	
org  500h
	
kcode0:   db   "7","8","9","/"
kcode1:   db   "4","5","6","*"
kcode2:   db   "1","2","3","-"
kcode3:   db   0b,"0","=","+" 


Loop:	
      jmp Loop

;====================================================================
      END
